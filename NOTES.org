* Compiler Passes
** Collect all data types
*** Build layout(s) for datapath buses etc. including type tag
*** Build block rams and garbage collectors for each type
** Collect all symbols
*** Build symbol table
** ...
** Create thing(s) above module-specification
*** type symbol -> size
** Create module-specification
* Ideas and Questions
** 1) Can tighten up the sub-FSM calls?
** 2) Easy to share states by hand, but how to automate?
** 3) How will lazy evaluation fit in?
** 4) Can operations share ports? (currently they will if they name them the same)
** 5) Either check uniqueness of operation/state names or use gensyms or something
** 6) If there's only one operation, we don't need op selector
** 7) If the only operation is combinational, we don't need start/busy signals
** 8) Can we elide unused operations from sub-FSM?
** 9) Support for dispatching multiple sub-module operations and awaiting all of them
** 10) More complicated sub-module dispatch might need FIFOs for args
** 11) Optimization to fuse states with no dependencies (e.g. the second state of a sub-module operation can fuse with the next state)
** 12) Instead of private sub-modules, global class instances like in smalltalk
*** Support instantiating modules with global, local, or private scope, which correspond to a singleton instance shared by all modules, a private sub-module shared within a module, and a private sub-module instantiated per invokation
** 13) Type checking and fully type-checked program should be reused for interpretation, compilation, simulation, etc.
** 14) Add the boilerplate first
* Tasks
** DONE design final nanopass language for generating verilog modules
*** DONE module name
*** DONE ports
*** DONE operations
**** DONE pass a list of symbols
**** DONE use length to generate operation input
**** DONE use list to generate localparams
**** DONE maybe operations should declare their own input/outputs? yes.
*** DONE states
**** DONE state should have: label, assigns, next state logic
**** DONE maybe this is wrapped as sub state machine per operation (see above)? yes.
*** DONE registers
*** DONE instantiations
*** DONE next state logic
*** DONE output/register assignments
**** Simple register to register
**** Register to/from memory
**** Allowed combinatorial operators
*** DONE parameters
**** Should this just be bookkeeping we just do? It's only being done for word size... yes.
** DONE write out pair and environment modules in the new language
** DONE write out simple combinatorial modules (hint: it didn't go great)
** TODO integrate with mlir
*** TODO kpn dialect
*** TODO fsm dialect
*** TODO verilog dialect
*** TODO racket integration with mlir
**** TODO module language for consuming mlir
**** TODO module language for consuming operation definition specification?
** TODO build a type system that is just a layer above the rtl level
** TODO update module calling convention
*** TODO refactor instantiations to implement ideas 10) and 12)
**** http://www.cs.columbia.edu/~sedwards/papers/edwards2019compositional.pdf
**** https://dl.acm.org/doi/10.1145/3373087.3375314
*** TODO write out evaluator module in the rtl0 language
** TODO rtl and verilog level simulation and test harness generation
*** TODO update machine simulator to simulate a module and its operations
*** TODO create test framework that can drive machine simulator AND generate verilog tests
*** TODO verify comb, pair, environment modules at the rtl0 and verilog level
